libqtermwidget5.so.0 libqtermwidget5-0 #MINVER#
 (c++)"QTermWidget::activity()@Base" 0.6.0+20150709
 (c++)"QTermWidget::availableColorSchemes()@Base" 0.6.0+20150709
 (c++)"QTermWidget::availableKeyBindings()@Base" 0.6.0+20150709
 (c++)"QTermWidget::bell(QString const&)@Base" 0.6.0+20150709
 (c++)"QTermWidget::changeDir(QString const&)@Base" 0.6.0+20150709
 (c++)"QTermWidget::clear()@Base" 0.6.0+20150709
 (c++)"QTermWidget::copyAvailable(bool)@Base" 0.6.0+20150709
 (c++)"QTermWidget::copyClipboard()@Base" 0.6.0+20150709
 (c++)"QTermWidget::find()@Base" 0.6.0+20150709
 (c++)"QTermWidget::findNext()@Base" 0.6.0+20150709
 (c++)"QTermWidget::findPrevious()@Base" 0.6.0+20150709
 (c++)"QTermWidget::finished()@Base" 0.6.0+20150709
 (c++)"QTermWidget::flowControlEnabled()@Base" 0.6.0+20150709
 (c++)"QTermWidget::getSelectionEnd(int&, int&)@Base" 0.6.0+20150709
 (c++)"QTermWidget::getSelectionStart(int&, int&)@Base" 0.6.0+20150709
 (c++)"QTermWidget::getShellPID()@Base" 0.6.0+20150709
 (c++)"QTermWidget::getTerminalFont()@Base" 0.6.0+20150709
 (c++)"QTermWidget::historyLinesCount()@Base" 0.6.0+20150709
 (c++)"QTermWidget::init(int)@Base" 0.6.0+20150709
 (c++)"QTermWidget::keyBindings()@Base" 0.6.0+20150709
 (c++)"QTermWidget::matchFound(int, int, int, int)@Base" 0.6.0+20150709
 (c++)"QTermWidget::noMatchFound()@Base" 0.6.0+20150709
 (c++)"QTermWidget::pasteClipboard()@Base" 0.6.0+20150709
 (c++)"QTermWidget::pasteSelection()@Base" 0.6.0+20150709
 (c++)"QTermWidget::~QTermWidget()@Base" 0.6.0+20150709
 (c++)"QTermWidget::QTermWidget(int, QWidget*)@Base" 0.6.0+20150709
 (c++)"QTermWidget::QTermWidget(int, QWidget*)@Base" 0.6.0+20150709
 (c++)"QTermWidget::QTermWidget(QWidget*)@Base" 0.6.0+20150709
 (c++)"QTermWidget::QTermWidget(QWidget*)@Base" 0.6.0+20150709
 (c++)"QTermWidget::qt_metacall(QMetaObject::Call, int, void**)@Base" 0.6.0+20150709
 (c++)"QTermWidget::qt_metacast(char const*)@Base" 0.6.0+20150709
 (c++)"QTermWidget::resizeEvent(QResizeEvent*)@Base" 0.6.0+20150709
 (c++)"QTermWidget::screenColumnsCount()@Base" 0.6.0+20150709
 (c++)"QTermWidget::screenLinesCount()@Base" 0.6.0+20150709
 (c++)"QTermWidget::scrollToEnd()@Base" 0.6.0+20150709
 (c++)"QTermWidget::search(bool, bool)@Base" 0.6.0+20150709
 (c++)"QTermWidget::selectedText(bool)@Base" 0.6.0+20150709
 (c++)"QTermWidget::selectionChanged(bool)@Base" 0.6.0+20150709
 (c++)"QTermWidget::sendData(char const*, int)@Base" 0.6.0+20150709
 (c++)"QTermWidget::sendText(QString const&)@Base" 0.6.0+20150709
 (c++)"QTermWidget::sessionFinished()@Base" 0.6.0+20150709
 (c++)"QTermWidget::setArgs(QStringList const&)@Base" 0.6.0+20150709
 (c++)"QTermWidget::setColorScheme(QString const&)@Base" 0.6.0+20150709
 (c++)"QTermWidget::setEnvironment(QStringList const&)@Base" 0.6.0+20150709
 (c++)"QTermWidget::setFlowControlEnabled(bool)@Base" 0.6.0+20150709
 (c++)"QTermWidget::setFlowControlWarningEnabled(bool)@Base" 0.6.0+20150709
 (c++)"QTermWidget::setHistorySize(int)@Base" 0.6.0+20150709
 (c++)"QTermWidget::setKeyBindings(QString const&)@Base" 0.6.0+20150709
 (c++)"QTermWidget::setMonitorActivity(bool)@Base" 0.6.0+20150709
 (c++)"QTermWidget::setMonitorSilence(bool)@Base" 0.6.0+20150709
 (c++)"QTermWidget::setMotionAfterPasting(int)@Base" 0.6.0+20150709
 (c++)"QTermWidget::setScrollBarPosition(QTermWidget::ScrollBarPosition)@Base" 0.6.0+20150709
 (c++)"QTermWidget::setSelectionEnd(int, int)@Base" 0.6.0+20150709
 (c++)"QTermWidget::setSelectionStart(int, int)@Base" 0.6.0+20150709
 (c++)"QTermWidget::setShellProgram(QString const&)@Base" 0.6.0+20150709
 (c++)"QTermWidget::setSilenceTimeout(int)@Base" 0.6.0+20150709
 (c++)"QTermWidget::setSize(int, int)@Base" 0.6.0+20150709
 (c++)"QTermWidget::setTerminalFont(QFont const&)@Base" 0.6.0+20150709
 (c++)"QTermWidget::setTerminalOpacity(double)@Base" 0.6.0+20150709
 (c++)"QTermWidget::setTextCodec(QTextCodec*)@Base" 0.6.0+20150709
 (c++)"QTermWidget::setWorkingDirectory(QString const&)@Base" 0.6.0+20150709
 (c++)"QTermWidget::setZoom(int)@Base" 0.6.0+20150709
 (c++)"QTermWidget::silence()@Base" 0.6.0+20150709
 (c++)"QTermWidget::startShellProgram()@Base" 0.6.0+20150709
 (c++)"QTermWidget::startTerminalTeletype()@Base" 0.6.0+20150709
 (c++)"QTermWidget::staticMetaObject@Base" 0.6.0+20150709
 (c++)"QTermWidget::termGetFocus()@Base" 0.6.0+20150709
 (c++)"QTermWidget::termKeyPressed(QKeyEvent*)@Base" 0.6.0+20150709
 (c++)"QTermWidget::termLostFocus()@Base" 0.6.0+20150709
 (c++)"QTermWidget::toggleShowSearchBar()@Base" 0.6.0+20150709
 (c++)"QTermWidget::urlActivated(QUrl const&)@Base" 0.6.0+20150709
 (c++)"QTermWidget::workingDirectory()@Base" 0.6.0+20150709
 (c++)"QTermWidget::zoomIn()@Base" 0.6.0+20150709
 (c++)"QTermWidget::zoomOut()@Base" 0.6.0+20150709
 createTermWidget@Base 0.6.0+20150709
 (optional|arch-bits=32|c++)"Konsole::BlockArray::at(unsigned int)@Base" 0.6.0+20150709
 (optional|arch-bits=32|c++)"Konsole::BlockArray::decreaseBuffer(unsigned int)@Base" 0.6.0+20150709
 (optional|arch-bits=32|c++)"Konsole::BlockArray::has(unsigned int) const@Base" 0.6.0+20150709
 (optional|arch-bits=32|c++)"Konsole::BlockArray::setHistorySize(unsigned int)@Base" 0.6.0+20150709
 (optional|arch-bits=32|c++)"Konsole::BlockArray::setSize(unsigned int)@Base" 0.6.0+20150709
 (optional|arch-bits=32|c++)"Konsole::CompactHistoryBlock::allocate(unsigned int)@Base" 0.6.0+20150709
 (optional|arch-bits=32|c++)"Konsole::CompactHistoryBlockList::allocate(unsigned int)@Base" 0.6.0+20150709
 (optional|arch-bits=32|c++)"Konsole::CompactHistoryLine::operator new(unsigned int, Konsole::CompactHistoryBlockList&)@Base" 0.6.0+20150709
 (optional|arch-bits=32|c++)"Konsole::HistoryScrollBlockArray::HistoryScrollBlockArray(unsigned int)@Base" 0.6.0+20150709
 (optional|arch-bits=32|c++)"Konsole::HistoryTypeBlockArray::HistoryTypeBlockArray(unsigned int)@Base" 0.6.0+20150709
 (optional|arch-bits=32|c++)"QHash<int, unsigned int>::deleteNode2(QHashData::Node*)@Base" 0.6.0+20150709
 (optional|arch-bits=32|c++)"QHash<int, unsigned int>::detach_helper()@Base" 0.6.0+20150709
 (optional|arch-bits=32|c++)"QHash<int, unsigned int>::duplicateNode(QHashData::Node*, void*)@Base" 0.6.0+20150709
 (optional|arch-bits=32|c++)"QHash<int, unsigned int>::findNode(int const&, unsigned int*) const@Base" 0.6.0+20150709
 (optional|arch-bits=64|c++)"Konsole::BlockArray::at(unsigned long)@Base" 0.6.0+20150709
 (optional|arch-bits=64|c++)"Konsole::BlockArray::decreaseBuffer(unsigned long)@Base" 0.6.0+20150709
 (optional|arch-bits=64|c++)"Konsole::BlockArray::has(unsigned long) const@Base" 0.6.0+20150709
 (optional|arch-bits=64|c++)"Konsole::BlockArray::setHistorySize(unsigned long)@Base" 0.6.0+20150709
 (optional|arch-bits=64|c++)"Konsole::BlockArray::setSize(unsigned long)@Base" 0.6.0+20150709
 (optional|arch-bits=64|c++)"Konsole::CompactHistoryBlock::allocate(unsigned long)@Base" 0.6.0+20150709
 (optional|arch-bits=64|c++)"Konsole::CompactHistoryBlockList::allocate(unsigned long)@Base" 0.6.0+20150709
 (optional|arch-bits=64|c++)"Konsole::CompactHistoryLine::operator new(unsigned long, Konsole::CompactHistoryBlockList&)@Base" 0.6.0+20150709
 (optional|arch-bits=64|c++)"Konsole::HistoryScrollBlockArray::HistoryScrollBlockArray(unsigned long)@Base" 0.6.0+20150709
 (optional|arch-bits=64|c++)"Konsole::HistoryTypeBlockArray::HistoryTypeBlockArray(unsigned long)@Base" 0.6.0+20150709
 (optional|arch-bits=64|c++)"QHash<int, unsigned long>::deleteNode2(QHashData::Node*)@Base" 0.6.0+20150709
 (optional|arch-bits=64|c++)"QHash<int, unsigned long>::detach_helper()@Base" 0.6.0+20150709
 (optional|arch-bits=64|c++)"QHash<int, unsigned long>::duplicateNode(QHashData::Node*, void*)@Base" 0.6.0+20150709
 (optional|arch-bits=64|c++)"QHash<int, unsigned long>::findNode(int const&, unsigned int*) const@Base" 0.6.0+20150709
 (optional|c++)"get_color_schemes_dir()@Base" 0.6.0+20150709
 (optional|c++)"get_kb_layout_dir()@Base" 0.6.0+20150709
 (optional|c++)"HistorySearch::findLineNumberInString(QList<int>, int)@Base" 0.6.0+20150709
 (optional|c++)"HistorySearch::~HistorySearch()@Base" 0.6.0+20150709
 (optional|c++)"HistorySearch::HistorySearch(QPointer<Konsole::Emulation>, QRegExp, bool, int, int, QObject*)@Base" 0.6.0+20150709
 (optional|c++)"HistorySearch::matchFound(int, int, int, int)@Base" 0.6.0+20150709
 (optional|c++)"HistorySearch::metaObject() const@Base" 0.6.0+20150709
 (optional|c++)"HistorySearch::noMatchFound()@Base" 0.6.0+20150709
 (optional|c++)"HistorySearch::qt_metacall(QMetaObject::Call, int, void**)@Base" 0.6.0+20150709
 (optional|c++)"HistorySearch::qt_metacast(char const*)@Base" 0.6.0+20150709
 (optional|c++)"HistorySearch::search()@Base" 0.6.0+20150709
 (optional|c++)"HistorySearch::search(int, int, int, int)@Base" 0.6.0+20150709
 (optional|c++)"HistorySearch::staticMetaObject@Base" 0.6.0+20150709
 (optional|c++)"Konsole::AccessibleColorScheme::AccessibleColorScheme()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::AutoScrollHandler::~AutoScrollHandler()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::AutoScrollHandler::AutoScrollHandler(QWidget*)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::AutoScrollHandler::eventFilter(QObject*, QEvent*)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::AutoScrollHandler::metaObject() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::AutoScrollHandler::qt_metacall(QMetaObject::Call, int, void**)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::AutoScrollHandler::qt_metacast(char const*)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::AutoScrollHandler::staticMetaObject@Base" 0.6.0+20150709
 (optional|c++)"Konsole::AutoScrollHandler::timerEvent(QTimerEvent*)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::base_color_table@Base" 0.6.0+20150709
 (optional|c++)"Konsole::BlockArray::append(Konsole::Block*)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::BlockArray::~BlockArray()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::BlockArray::BlockArray()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::BlockArray::increaseBuffer()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::BlockArray::lastBlock() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::BlockArray::newBlock()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::BlockArray::unmap()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::ColorScheme::backgroundColor() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::ColorScheme::colorEntry(int, unsigned int) const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::ColorScheme::colorNameForIndex(int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::ColorScheme::colorNames@Base" 0.6.0+20150709
 (optional|c++)"Konsole::ColorScheme::~ColorScheme()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::ColorScheme::ColorScheme()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::ColorScheme::ColorScheme()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::ColorScheme::ColorScheme(Konsole::ColorScheme const&)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::ColorScheme::ColorScheme(Konsole::ColorScheme const&)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::ColorScheme::colorTable() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::ColorScheme::defaultTable@Base" 0.6.0+20150709
 (optional|c++)"Konsole::ColorScheme::description() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::ColorScheme::foregroundColor() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::ColorScheme::getColorTable(Konsole::ColorEntry*, unsigned int) const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::ColorScheme::hasDarkBackground() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::ColorSchemeManager::allColorSchemes()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::ColorSchemeManager::~ColorSchemeManager()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::ColorSchemeManager::ColorSchemeManager()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::ColorSchemeManager::_defaultColorScheme@Base" 0.6.0+20150709
 (optional|c++)"Konsole::ColorSchemeManager::defaultColorScheme() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::ColorSchemeManager::deleteColorScheme(QString const&)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::ColorSchemeManager::findColorSchemePath(QString const&) const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::ColorSchemeManager::findColorScheme(QString const&)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::ColorSchemeManager::instance()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::ColorSchemeManager::listColorSchemes()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::ColorSchemeManager::listKDE3ColorSchemes()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::ColorSchemeManager::loadAllColorSchemes()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::ColorSchemeManager::loadColorScheme(QString const&)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::ColorSchemeManager::loadCustomColorScheme(QString const&)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::ColorSchemeManager::loadKDE3ColorScheme(QString const&)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::ColorSchemeManager::theColorSchemeManager@Base" 0.6.0+20150709
 (optional|c++)"Konsole::ColorScheme::name() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::ColorScheme::opacity() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::ColorScheme::randomizedBackgroundColor() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::ColorScheme::readColorEntry(QSettings*, int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::ColorScheme::read(QString const&)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::ColorScheme::setColorTableEntry(int, Konsole::ColorEntry const&)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::ColorScheme::setDescription(QString const&)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::ColorScheme::setName(QString const&)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::ColorScheme::setOpacity(double)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::ColorScheme::setRandomizationRange(int, unsigned short, unsigned char, unsigned char)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::ColorScheme::setRandomizedBackgroundColor(bool)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::ColorScheme::translatedColorNameForIndex(int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::ColorScheme::translatedColorNames@Base" 0.6.0+20150709
 (optional|c++)"Konsole::CompactHistoryBlock::~CompactHistoryBlock()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::CompactHistoryBlock::contains(void*)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::CompactHistoryBlock::deallocate()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::CompactHistoryBlock::isInUse()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::CompactHistoryBlock::length()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::CompactHistoryBlockList::~CompactHistoryBlockList()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::CompactHistoryBlockList::deallocate(void*)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::CompactHistoryBlock::remaining()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::CompactHistoryLine::~CompactHistoryLine()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::CompactHistoryLine::CompactHistoryLine(QVector<Konsole::Character> const&, Konsole::CompactHistoryBlockList&)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::CompactHistoryLine::getCharacter(int, Konsole::Character&)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::CompactHistoryLine::getCharacters(Konsole::Character*, int, int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::CompactHistoryLine::getLength() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::CompactHistoryLine::isWrapped() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::CompactHistoryLine::setWrapped(bool)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::CompactHistoryScroll::addCells(Konsole::Character const*, int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::CompactHistoryScroll::addCellsVector(QVector<Konsole::Character> const&)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::CompactHistoryScroll::addLine(bool)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::CompactHistoryScroll::~CompactHistoryScroll()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::CompactHistoryScroll::CompactHistoryScroll(unsigned int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::CompactHistoryScroll::getCells(int, int, int, Konsole::Character*)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::CompactHistoryScroll::getLineLen(int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::CompactHistoryScroll::getLines()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::CompactHistoryScroll::isWrappedLine(int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::CompactHistoryScroll::setMaxNbLines(unsigned int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::CompactHistoryType::~CompactHistoryType()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::CompactHistoryType::CompactHistoryType(unsigned int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::CompactHistoryType::isEnabled() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::CompactHistoryType::maximumLineCount() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::CompactHistoryType::scroll(Konsole::HistoryScroll*) const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Emulation::bufferedUpdate()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Emulation::changeTabTextColorRequest(int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Emulation::clearHistory()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Emulation::createWindow()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Emulation::~Emulation()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Emulation::Emulation()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Emulation::eraseChar() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Emulation::flowControlKeyPressed(bool)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Emulation::history() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Emulation::imageSizeChanged(int, int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Emulation::imageSize() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Emulation::keyBindings() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Emulation::lineCount() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Emulation::lockPtyRequest(bool)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Emulation::metaObject() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Emulation::outputChanged()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Emulation::profileChangeCommandReceived(QString const&)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Emulation::programUsesMouseChanged(bool)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Emulation::programUsesMouse() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Emulation::qt_metacall(QMetaObject::Call, int, void**)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Emulation::qt_metacast(char const*)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Emulation::receiveChar(int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Emulation::receiveData(char const*, int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Emulation::sendData(char const*, int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Emulation::sendKeyEvent(QKeyEvent*)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Emulation::sendMouseEvent(int, int, int, int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Emulation::sendString(char const*, int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Emulation::setCodec(Konsole::Emulation::EmulationCodec)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Emulation::setCodec(QTextCodec const*)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Emulation::setHistory(Konsole::HistoryType const&)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Emulation::setImageSize(int, int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Emulation::setKeyBindings(QString const&)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Emulation::setScreen(int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Emulation::showBulk()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Emulation::stateSet(int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Emulation::staticMetaObject@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Emulation::titleChanged(int, QString const&)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Emulation::usesMouseChanged(bool)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Emulation::useUtf8Request(bool)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Emulation::writeToStream(Konsole::TerminalCharacterDecoder*, int, int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Emulation::zmodemDetected()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::ExtendedCharTable::createExtendedChar(unsigned short*, unsigned short)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::ExtendedCharTable::extendedCharHash(unsigned short*, unsigned short) const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::ExtendedCharTable::extendedCharMatch(unsigned short, unsigned short*, unsigned short) const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::ExtendedCharTable::~ExtendedCharTable()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::ExtendedCharTable::ExtendedCharTable()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::ExtendedCharTable::instance@Base" 0.6.0+20150709
 (optional|c++)"Konsole::ExtendedCharTable::lookupExtendedChar(unsigned short, unsigned short&) const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Filter::addHotSpot(Konsole::Filter::HotSpot*)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Filter::buffer()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::FilterChain::addFilter(Konsole::Filter*)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::FilterChain::clear()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::FilterChain::containsFilter(Konsole::Filter*)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::FilterChain::~FilterChain()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::FilterChain::hotSpotAt(int, int) const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::FilterChain::hotSpots() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::FilterChain::process()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::FilterChain::removeFilter(Konsole::Filter*)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::FilterChain::reset()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::FilterChain::setBuffer(QString const*, QList<int> const*)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Filter::~Filter()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Filter::Filter()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Filter::getLineColumn(int, int&, int&)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Filter::HotSpot::actions()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Filter::hotSpotAt(int, int) const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Filter::HotSpot::endColumn() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Filter::HotSpot::endLine() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Filter::HotSpot::~HotSpot()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Filter::HotSpot::HotSpot(int, int, int, int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Filter::hotSpotsAtLine(int) const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Filter::hotSpots() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Filter::HotSpot::setType(Konsole::Filter::HotSpot::Type)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Filter::HotSpot::startColumn() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Filter::HotSpot::startLine() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Filter::HotSpot::tooltip() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Filter::HotSpot::type() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::FilterObject::activated()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::FilterObject::activated(QUrl const&)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::FilterObject::emitActivated(QUrl const&)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::FilterObject::~FilterObject()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::FilterObject::metaObject() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::FilterObject::qt_metacall(QMetaObject::Call, int, void**)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::FilterObject::qt_metacast(char const*)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::FilterObject::staticMetaObject@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Filter::reset()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Filter::setBuffer(QString const*, QList<int> const*)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::HistoryFile::add(unsigned char const*, int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::HistoryFile::get(unsigned char*, int, int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::HistoryFile::~HistoryFile()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::HistoryFile::HistoryFile()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::HistoryFile::isMapped()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::HistoryFile::len()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::HistoryFile::map()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::HistoryFile::unmap()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::HistoryScroll::addCellsVector(QVector<Konsole::Character> const&)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::HistoryScrollBlockArray::addCells(Konsole::Character const*, int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::HistoryScrollBlockArray::addLine(bool)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::HistoryScrollBlockArray::getCells(int, int, int, Konsole::Character*)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::HistoryScrollBlockArray::getLineLen(int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::HistoryScrollBlockArray::getLines()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::HistoryScrollBlockArray::~HistoryScrollBlockArray()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::HistoryScrollBlockArray::isWrappedLine(int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::HistoryScrollBuffer::addCells(Konsole::Character const*, int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::HistoryScrollBuffer::addCellsVector(QVector<Konsole::Character> const&)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::HistoryScrollBuffer::addLine(bool)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::HistoryScrollBuffer::bufferIndex(int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::HistoryScrollBuffer::getCells(int, int, int, Konsole::Character*)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::HistoryScrollBuffer::getLineLen(int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::HistoryScrollBuffer::getLines()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::HistoryScrollBuffer::~HistoryScrollBuffer()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::HistoryScrollBuffer::HistoryScrollBuffer(unsigned int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::HistoryScrollBuffer::isWrappedLine(int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::HistoryScrollBuffer::setMaxNbLines(unsigned int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::HistoryScrollFile::addCells(Konsole::Character const*, int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::HistoryScrollFile::addLine(bool)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::HistoryScrollFile::getCells(int, int, int, Konsole::Character*)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::HistoryScrollFile::getLineLen(int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::HistoryScrollFile::getLines()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::HistoryScrollFile::~HistoryScrollFile()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::HistoryScrollFile::HistoryScrollFile(QString const&)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::HistoryScrollFile::isWrappedLine(int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::HistoryScrollFile::startOfLine(int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::HistoryScroll::hasScroll()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::HistoryScroll::~HistoryScroll()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::HistoryScroll::HistoryScroll(Konsole::HistoryType*)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::HistoryScrollNone::addCells(Konsole::Character const*, int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::HistoryScrollNone::addLine(bool)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::HistoryScrollNone::getCells(int, int, int, Konsole::Character*)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::HistoryScrollNone::getLineLen(int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::HistoryScrollNone::getLines()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::HistoryScrollNone::hasScroll()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::HistoryScrollNone::~HistoryScrollNone()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::HistoryScrollNone::HistoryScrollNone()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::HistoryScrollNone::isWrappedLine(int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::HistoryTypeBlockArray::~HistoryTypeBlockArray()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::HistoryTypeBlockArray::isEnabled() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::HistoryTypeBlockArray::maximumLineCount() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::HistoryTypeBlockArray::scroll(Konsole::HistoryScroll*) const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::HistoryTypeBuffer::~HistoryTypeBuffer()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::HistoryTypeBuffer::HistoryTypeBuffer(unsigned int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::HistoryTypeBuffer::isEnabled() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::HistoryTypeBuffer::maximumLineCount() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::HistoryTypeBuffer::scroll(Konsole::HistoryScroll*) const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::HistoryTypeFile::getFileName() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::HistoryTypeFile::~HistoryTypeFile()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::HistoryTypeFile::HistoryTypeFile(QString const&)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::HistoryTypeFile::isEnabled() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::HistoryTypeFile::maximumLineCount() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::HistoryTypeFile::scroll(Konsole::HistoryScroll*) const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::HistoryType::~HistoryType()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::HistoryType::HistoryType()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::HistoryTypeNone::~HistoryTypeNone()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::HistoryTypeNone::HistoryTypeNone()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::HistoryTypeNone::isEnabled() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::HistoryTypeNone::maximumLineCount() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::HistoryTypeNone::scroll(Konsole::HistoryScroll*) const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::HTMLDecoder::begin(QTextStream*)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::HTMLDecoder::closeSpan(QString&)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::HTMLDecoder::decodeLine(Konsole::Character const*, int, unsigned char)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::HTMLDecoder::end()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::HTMLDecoder::~HTMLDecoder()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::HTMLDecoder::HTMLDecoder()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::HTMLDecoder::openSpan(QString&, QString const&)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::HTMLDecoder::setColorTable(Konsole::ColorEntry const*)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::KDE3ColorSchemeReader::KDE3ColorSchemeReader(QIODevice*)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::KDE3ColorSchemeReader::read()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::KDE3ColorSchemeReader::readColorLine(QString const&, Konsole::ColorScheme*)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::KDE3ColorSchemeReader::readTitleLine(QString const&, Konsole::ColorScheme*)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::KeyboardTranslator::addEntry(Konsole::KeyboardTranslator::Entry const&)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::KeyboardTranslator::description() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::KeyboardTranslator::entries() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::KeyboardTranslator::Entry::conditionToString() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::KeyboardTranslator::Entry::Entry()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::KeyboardTranslator::Entry::escapedText(bool, QFlags<Qt::KeyboardModifier>) const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::KeyboardTranslator::Entry::insertModifier(QString&, int) const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::KeyboardTranslator::Entry::insertState(QString&, int) const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::KeyboardTranslator::Entry::matches(int, QFlags<Qt::KeyboardModifier>, QFlags<Konsole::KeyboardTranslator::State>) const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::KeyboardTranslator::Entry::operator==(Konsole::KeyboardTranslator::Entry const&) const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::KeyboardTranslator::Entry::resultToString(bool, QFlags<Qt::KeyboardModifier>) const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::KeyboardTranslator::Entry::unescape(QByteArray const&) const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::KeyboardTranslator::findEntry(int, QFlags<Qt::KeyboardModifier>, QFlags<Konsole::KeyboardTranslator::State>) const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::KeyboardTranslator::KeyboardTranslator(QString const&)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::KeyboardTranslatorManager::addTranslator(Konsole::KeyboardTranslator*)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::KeyboardTranslatorManager::allTranslators()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::KeyboardTranslatorManager::defaultTranslator()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::KeyboardTranslatorManager::defaultTranslatorText@Base" 0.6.0+20150709
 (optional|c++)"Konsole::KeyboardTranslatorManager::deleteTranslator(QString const&)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::KeyboardTranslatorManager::findTranslatorPath(QString const&)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::KeyboardTranslatorManager::findTranslator(QString const&)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::KeyboardTranslatorManager::findTranslators()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::KeyboardTranslatorManager::instance()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::KeyboardTranslatorManager::~KeyboardTranslatorManager()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::KeyboardTranslatorManager::KeyboardTranslatorManager()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::KeyboardTranslatorManager::loadTranslator(QIODevice*, QString const&)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::KeyboardTranslatorManager::loadTranslator(QString const&)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::KeyboardTranslatorManager::saveTranslator(Konsole::KeyboardTranslator const*)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::KeyboardTranslatorManager::theKeyboardTranslatorManager@Base" 0.6.0+20150709
 (optional|c++)"Konsole::KeyboardTranslator::name() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::KeyboardTranslatorReader::createEntry(QString const&, QString const&)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::KeyboardTranslatorReader::decodeSequence(QString const&, int&, QFlags<Qt::KeyboardModifier>&, QFlags<Qt::KeyboardModifier>&, QFlags<Konsole::KeyboardTranslator::State>&, QFlags<Konsole::KeyboardTranslator::State>&)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::KeyboardTranslatorReader::description() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::KeyboardTranslatorReader::hasNextEntry()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::KeyboardTranslatorReader::~KeyboardTranslatorReader()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::KeyboardTranslatorReader::KeyboardTranslatorReader(QIODevice*)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::KeyboardTranslatorReader::nextEntry()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::KeyboardTranslatorReader::parseAsCommand(QString const&, Konsole::KeyboardTranslator::Command&)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::KeyboardTranslatorReader::parseAsKeyCode(QString const&, int&)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::KeyboardTranslatorReader::parseAsModifier(QString const&, Qt::KeyboardModifier&)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::KeyboardTranslatorReader::parseAsStateFlag(QString const&, Konsole::KeyboardTranslator::State&)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::KeyboardTranslatorReader::parseError()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::KeyboardTranslatorReader::readNext()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::KeyboardTranslatorReader::tokenize(QString const&)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::KeyboardTranslator::removeEntry(Konsole::KeyboardTranslator::Entry const&)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::KeyboardTranslator::replaceEntry(Konsole::KeyboardTranslator::Entry const&, Konsole::KeyboardTranslator::Entry const&)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::KeyboardTranslator::setDescription(QString const&)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::KeyboardTranslator::setName(QString const&)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::KeyboardTranslatorWriter::~KeyboardTranslatorWriter()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::KeyboardTranslatorWriter::KeyboardTranslatorWriter(QIODevice*)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::KeyboardTranslatorWriter::writeEntry(Konsole::KeyboardTranslator::Entry const&)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::KeyboardTranslatorWriter::writeHeader(QString const&)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::PlainTextDecoder::begin(QTextStream*)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::PlainTextDecoder::decodeLine(Konsole::Character const*, int, unsigned char)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::PlainTextDecoder::end()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::PlainTextDecoder::linePositions() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::PlainTextDecoder::~PlainTextDecoder()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::PlainTextDecoder::PlainTextDecoder()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::PlainTextDecoder::setRecordLinePositions(bool)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::PlainTextDecoder::setTrailingWhitespace(bool)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::PlainTextDecoder::trailingWhitespace() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Pty::addEnvironmentVariables(QStringList const&)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Pty::dataReceived()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Pty::erase() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Pty::flowControlEnabled() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Pty::foregroundProcessGroup() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Pty::init()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Pty::lockPty(bool)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Pty::metaObject() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Pty::~Pty()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Pty::Pty(int, QObject*)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Pty::Pty(int, QObject*)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Pty::Pty(QObject*)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Pty::Pty(QObject*)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Pty::qt_metacall(QMetaObject::Call, int, void**)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Pty::qt_metacast(char const*)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Pty::receivedData(char const*, int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Pty::sendData(char const*, int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Pty::setEmptyPTYProperties()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Pty::setErase(char)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Pty::setFlowControlEnabled(bool)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Pty::setupChildProcess()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Pty::setUtf8Mode(bool)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Pty::setWindowSize(int, int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Pty::setWriteable(bool)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Pty::start(QString const&, QStringList const&, QStringList const&, unsigned long, bool)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Pty::staticMetaObject@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Pty::windowSize() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::RegExpFilter::HotSpot::activate(QString const&)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::RegExpFilter::HotSpot::capturedTexts() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::RegExpFilter::HotSpot::~HotSpot()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::RegExpFilter::HotSpot::HotSpot(int, int, int, int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::RegExpFilter::HotSpot::setCapturedTexts(QStringList const&)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::RegExpFilter::newHotSpot(int, int, int, int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::RegExpFilter::process()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::RegExpFilter::regExp() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::RegExpFilter::~RegExpFilter()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::RegExpFilter::RegExpFilter()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::RegExpFilter::setRegExp(QRegExp const&)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Screen::addHistLine()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Screen::backspace()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Screen::backtab(int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Screen::bottomMargin() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Screen::changeTabStop(bool)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Screen::checkSelection(int, int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Screen::clear()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Screen::clearEntireLine()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Screen::clearEntireScreen()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Screen::clearImage(int, int, char)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Screen::clearSelection()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Screen::clearTabStops()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Screen::clearToBeginOfLine()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Screen::clearToBeginOfScreen()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Screen::clearToEndOfLine()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Screen::clearToEndOfScreen()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Screen::compose(QString const&)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Screen::copyFromHistory(Konsole::Character*, int, int) const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Screen::copyFromScreen(Konsole::Character*, int, int) const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Screen::copyLineToStream(int, int, int, Konsole::TerminalCharacterDecoder*, bool, bool) const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Screen::cursorDown(int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Screen::cursorLeft(int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Screen::cursorRight(int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Screen::cursorUp(int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Screen::defaultChar@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Screen::deleteChars(int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Screen::deleteLines(int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Screen::displayCharacter(unsigned short)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Screen::droppedLines() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Screen::eraseChars(int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Screen::fillWithDefaultChar(Konsole::Character*, int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Screen::getCursorX() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Screen::getCursorY() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Screen::getHistLines() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Screen::getImage(Konsole::Character*, int, int, int) const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Screen::getLineProperties(int, int) const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Screen::getMode(int) const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Screen::getScroll() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Screen::getSelectionEnd(int&, int&) const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Screen::getSelectionStart(int&, int&) const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Screen::hasScroll() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Screen::helpAlign()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Screen::home()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Screen::index()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Screen::initTabStops()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Screen::insertChars(int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Screen::insertLines(int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Screen::isSelected(int, int) const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Screen::isSelectionValid() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Screen::lastScrolledRegion() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Screen::moveImage(int, int, int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Screen::newLine()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Screen::nextLine()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Screen::reset(bool)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Screen::resetDroppedLines()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Screen::resetMode(int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Screen::resetRendition(int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Screen::resetScrolledLines()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Screen::resizeImage(int, int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Screen::restoreCursor()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Screen::restoreMode(int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Screen::reverseIndex()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Screen::reverseRendition(Konsole::Character&) const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Screen::saveCursor()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Screen::saveMode(int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Screen::~Screen()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Screen::Screen(int, int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Screen::scrollDown(int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Screen::scrollDown(int, int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Screen::scrolledLines() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Screen::scrollUp(int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Screen::scrollUp(int, int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Screen::selectedText(bool) const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Screen::setBackColor(int, int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Screen::setCursorX(int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Screen::setCursorY(int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Screen::setCursorYX(int, int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Screen::setDefaultMargins()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Screen::setDefaultRendition()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Screen::setForeColor(int, int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Screen::setLineProperty(unsigned char, bool)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Screen::setMargins(int, int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Screen::setMode(int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Screen::setRendition(int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Screen::setScroll(Konsole::HistoryType const&, bool)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Screen::setSelectionEnd(int, int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Screen::setSelectionStart(int, int, bool)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Screen::tab(int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Screen::topMargin() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Screen::toStartOfLine()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Screen::updateEffectiveRendition()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::ScreenWindow::atEndOfOutput() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::ScreenWindow::clearSelection()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::ScreenWindow::columnCount() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::ScreenWindow::currentLine() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::ScreenWindow::cursorPosition() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::ScreenWindow::endWindowLine() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::ScreenWindow::fillUnusedArea()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::ScreenWindow::getImage()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::ScreenWindow::getLineProperties()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::ScreenWindow::getSelectionEnd(int&, int&)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::ScreenWindow::getSelectionStart(int&, int&)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::ScreenWindow::isSelected(int, int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::ScreenWindow::lineCount() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::ScreenWindow::metaObject() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::ScreenWindow::notifyOutputChanged()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::ScreenWindow::outputChanged()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::ScreenWindow::qt_metacall(QMetaObject::Call, int, void**)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::ScreenWindow::qt_metacast(char const*)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::ScreenWindow::resetScrollCount()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::ScreenWindow::screen() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::ScreenWindow::~ScreenWindow()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::ScreenWindow::ScreenWindow(QObject*)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::ScreenWindow::scrollBy(Konsole::ScreenWindow::RelativeScrollMode, int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::ScreenWindow::scrollCount() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::ScreenWindow::scrolled(int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::ScreenWindow::scrollRegion() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::ScreenWindow::scrollTo(int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::ScreenWindow::selectedText(bool) const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::ScreenWindow::selectionChanged()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::ScreenWindow::setScreen(Konsole::Screen*)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::ScreenWindow::setSelectionEnd(int, int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::ScreenWindow::setSelectionStart(int, int, bool)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::ScreenWindow::setTrackOutput(bool)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::ScreenWindow::setWindowLines(int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::ScreenWindow::staticMetaObject@Base" 0.6.0+20150709
 (optional|c++)"Konsole::ScreenWindow::trackOutput() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::ScreenWindow::windowColumns() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::ScreenWindow::windowLines() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Screen::writeLinesToStream(Konsole::TerminalCharacterDecoder*, int, int) const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Screen::writeSelectionToStream(Konsole::TerminalCharacterDecoder*, bool) const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Screen::writeToStream(Konsole::TerminalCharacterDecoder*, int, int, bool) const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Session::activity()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Session::activityStateSet(int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Session::addView(Konsole::TerminalDisplay*)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Session::arguments() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Session::bellRequest(QString const&)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Session::changeBackgroundColorRequest(QColor const&)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Session::changeTabTextColorRequest(int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Session::clearHistory()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Session::close()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Session::done(int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Session::emulation() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Session::environment() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Session::finished()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Session::flowControlEnabledChanged(bool)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Session::flowControlEnabled() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Session::foregroundProcessId() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Session::getPtySlaveFd() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::SessionGroup::addSession(Konsole::Session*)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::SessionGroup::connectAll(bool)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::SessionGroup::connectPair(Konsole::Session*, Konsole::Session*)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::SessionGroup::disconnectPair(Konsole::Session*, Konsole::Session*)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::SessionGroup::masterMode() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::SessionGroup::masters() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::SessionGroup::masterStatus(Konsole::Session*) const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::SessionGroup::metaObject() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::SessionGroup::qt_metacall(QMetaObject::Call, int, void**)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::SessionGroup::qt_metacast(char const*)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::SessionGroup::removeSession(Konsole::Session*)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::SessionGroup::~SessionGroup()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::SessionGroup::SessionGroup()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::SessionGroup::sessions() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::SessionGroup::setMasterMode(int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::SessionGroup::setMasterStatus(Konsole::Session*, bool)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::SessionGroup::staticMetaObject@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Session::hasDarkBackground() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Session::historyType() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Session::iconName() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Session::iconText() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Session::isMonitorActivity() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Session::isMonitorSilence() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Session::isRunning() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Session::keyBindings() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Session::lastSessionId@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Session::metaObject() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Session::monitorTimerDone()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Session::onEmulationSizeChange(int, int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Session::onReceiveBlock(char const*, int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Session::onViewSizeChange(int, int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Session::openUrlRequest(QString const&)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Session::processId() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Session::profileChangeCommandReceived(QString const&)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Session::profileChanged(QString const&)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Session::profileKey() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Session::program() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Session::qt_metacall(QMetaObject::Call, int, void**)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Session::qt_metacast(char const*)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Session::receivedData(QString const&)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Session::refresh()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Session::removeView(Konsole::TerminalDisplay*)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Session::resizeRequest(QSize const&)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Session::run()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Session::runEmptyPTY()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Session::sendSignal(int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Session::sendText(QString const&) const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Session::~Session()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Session::sessionId() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Session::Session(QObject*)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Session::setAddToUtmp(bool)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Session::setArguments(QStringList const&)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Session::setCodec(QTextCodec*)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Session::setDarkBackground(bool)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Session::setEnvironment(QStringList const&)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Session::setFlowControlEnabled(bool)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Session::setHistoryType(Konsole::HistoryType const&)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Session::setIconName(QString const&)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Session::setIconText(QString const&)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Session::setInitialWorkingDirectory(QString const&)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Session::setKeyBindings(QString const&)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Session::setMonitorActivity(bool)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Session::setMonitorSilence(bool)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Session::setMonitorSilenceSeconds(int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Session::setProfileKey(QString const&)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Session::setProgram(QString const&)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Session::setSize(QSize const&)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Session::setTabTitleFormat(Konsole::Session::TabTitleContext, QString const&)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Session::setTitle(Konsole::Session::TitleRole, QString const&)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Session::setUserTitle(int, QString const&)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Session::silence()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Session::size()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Session::started()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Session::stateChanged(int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Session::staticMetaObject@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Session::tabTitleFormat(Konsole::Session::TabTitleContext) const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Session::titleChanged()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Session::title(Konsole::Session::TitleRole) const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Session::updateTerminalSize()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Session::userTitle() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Session::viewDestroyed(QObject*)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Session::views() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Session::windowId() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::ShellCommand::arguments() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::ShellCommand::command() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::ShellCommand::expand(QString const&)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::ShellCommand::expand(QStringList const&)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::ShellCommand::fullCommand() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::ShellCommand::isAvailable() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::ShellCommand::isRootCommand() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::ShellCommand::ShellCommand(QString const&)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::ShellCommand::ShellCommand(QString const&)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::ShellCommand::ShellCommand(QString const&, QStringList const&)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::ShellCommand::ShellCommand(QString const&, QStringList const&)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::_antialiasText@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::bell(QString const&)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::blinkCursorEvent()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::blinkEvent()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::calcGeometry()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::calculateTextArea(int, int, int, int, int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::changedContentSizeSignal(int, int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::changedFontMetricSignal(int, int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::charClass(QChar) const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::clearImage()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::colorTable() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::configureRequest(QPoint const&)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::copyAvailable(bool)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::copyClipboard()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::cursorPosition() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::doDrag()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::dragEnterEvent(QDragEnterEvent*)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::drawBackground(QPainter&, QRect const&, QColor const&, bool)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::drawCharacters(QPainter&, QRect const&, QString const&, Konsole::Character const*, bool)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::drawContents(QPainter&, QRect const&)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::drawCursor(QPainter&, QRect const&, QColor const&, QColor const&, bool&)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::drawInputMethodPreeditString(QPainter&, QRect const&)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::drawLineCharString(QPainter&, int, int, QString const&, Konsole::Character const*)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::drawTextFragment(QPainter&, QRect const&, QString const&, Konsole::Character const*)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::dropEvent(QDropEvent*)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::emitSelection(bool, bool)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::enableBell()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::event(QEvent*)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::extendSelection(QPoint const&)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::filterActions(QPoint const&)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::filterChain() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::focusInEvent(QFocusEvent*)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::focusNextPrevChild(bool)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::focusOutEvent(QFocusEvent*)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::fontChange(QFont const&)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::getCharacterPosition(QPoint const&, int&, int&) const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::handleShortcutOverrideEvent(QKeyEvent*)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::HAVE_TRANSPARENCY@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::hideEvent(QHideEvent*)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::hotSpotRegion() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::imageToWidget(QRect const&) const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::inputMethodEvent(QInputMethodEvent*)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::inputMethodQuery(Qt::InputMethodQuery) const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::isBusySelecting(bool)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::keyboardCursorColor() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::keyboardCursorShape() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::keyPressedSignal(QKeyEvent*)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::keyPressEvent(QKeyEvent*)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::lineSpacing() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::makeImage()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::metaObject() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::motionAfterPasting()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::mouseDoubleClickEvent(QMouseEvent*)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::mouseMoveEvent(QMouseEvent*)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::mousePressEvent(QMouseEvent*)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::mouseReleaseEvent(QMouseEvent*)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::mouseSignal(int, int, int, int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::mouseTripleClickEvent(QMouseEvent*)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::notifyBell(QString const&)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::outputSuspended(bool)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::overrideShortcutCheck(QKeyEvent*, bool&)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::paintEvent(QPaintEvent*)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::paintFilters(QPainter&)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::pasteClipboard()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::pasteSelection()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::preeditRect() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::processFilters()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::propagateSize()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::qt_metacall(QMetaObject::Call, int, void**)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::qt_metacast(char const*)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::randomSeed() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::resizeEvent(QResizeEvent*)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::screenWindow() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::scrollBarPositionChanged(int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::scrollImage(int, QRect const&)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::scrollToEnd()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::selectionChanged()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::sendStringToEmu(char const*)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::setBackgroundColor(QColor const&)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::setBellMode(int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::setBlinkingCursor(bool)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::setBlinkingTextEnabled(bool)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::setColorTable(Konsole::ColorEntry const*)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::setFixedSize(int, int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::setFlowControlWarningEnabled(bool)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::setFont(QFont const&)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::setForegroundColor(QColor const&)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::setKeyboardCursorColor(bool, QColor const&)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::setKeyboardCursorShape(Konsole::TerminalDisplay::KeyboardCursorShape)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::setLineSpacing(unsigned int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::setMotionAfterPasting(Konsole::MotionAfterPasting)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::setOpacity(double)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::setRandomSeed(unsigned int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::setScreenWindow(Konsole::ScreenWindow*)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::setScrollBarPosition(Konsole::TerminalDisplay::ScrollBarPosition)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::setScroll(int, int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::setSelection(QString const&)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::setSize(int, int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::setUsesMouse(bool)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::setVTFont(QFont const&)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::setWordCharacters(QString const&)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::showEvent(QShowEvent*)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::showResizeNotification()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::sizeHint() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::staticMetaObject@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::swapColorTable()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::termGetFocus()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::~TerminalDisplay()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::TerminalDisplay(QWidget*)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::termLostFocus()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::textWidth(int, int, int) const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::tripleClickTimeout()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::updateCursor()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::updateFilters()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::updateImage()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::updateImageSize()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::updateLineProperties()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::usesMouseChanged()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::usesMouse() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalDisplay::wheelEvent(QWheelEvent*)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalImageFilterChain::setImage(Konsole::Character const*, int, int, QVector<unsigned char> const&)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalImageFilterChain::~TerminalImageFilterChain()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::TerminalImageFilterChain::TerminalImageFilterChain()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::UrlFilter::activated(QUrl const&)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::UrlFilter::CompleteUrlRegExp@Base" 0.6.0+20150709
 (optional|c++)"Konsole::UrlFilter::EmailAddressRegExp@Base" 0.6.0+20150709
 (optional|c++)"Konsole::UrlFilter::FullUrlRegExp@Base" 0.6.0+20150709
 (optional|c++)"Konsole::UrlFilter::HotSpot::actions()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::UrlFilter::HotSpot::activate(QString const&)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::UrlFilter::HotSpot::getUrlObject() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::UrlFilter::HotSpot::~HotSpot()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::UrlFilter::HotSpot::HotSpot(int, int, int, int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::UrlFilter::HotSpot::tooltip() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::UrlFilter::HotSpot::urlType() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::UrlFilter::metaObject() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::UrlFilter::newHotSpot(int, int, int, int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::UrlFilter::qt_metacall(QMetaObject::Call, int, void**)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::UrlFilter::qt_metacast(char const*)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::UrlFilter::staticMetaObject@Base" 0.6.0+20150709
 (optional|c++)"Konsole::UrlFilter::~UrlFilter()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::UrlFilter::UrlFilter()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::vt100_graphics@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Vt102Emulation::addArgument()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Vt102Emulation::addDigit(int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Vt102Emulation::addToCurrentToken(int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Vt102Emulation::applyCharset(unsigned short)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Vt102Emulation::clearEntireScreen()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Vt102Emulation::clearScreenAndSetColumns(int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Vt102Emulation::eraseChar() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Vt102Emulation::getMode(int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Vt102Emulation::initTokenizer()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Vt102Emulation::metaObject() const@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Vt102Emulation::processToken(int, int, int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Vt102Emulation::processWindowAttributeChange()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Vt102Emulation::qt_metacall(QMetaObject::Call, int, void**)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Vt102Emulation::qt_metacast(char const*)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Vt102Emulation::receiveChar(int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Vt102Emulation::reportAnswerBack()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Vt102Emulation::reportCursorPosition()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Vt102Emulation::reportDecodingError()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Vt102Emulation::reportSecondaryAttributes()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Vt102Emulation::reportStatus()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Vt102Emulation::reportTerminalParms(int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Vt102Emulation::reportTerminalType()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Vt102Emulation::reset()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Vt102Emulation::resetCharset(int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Vt102Emulation::resetMode(int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Vt102Emulation::resetModes()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Vt102Emulation::resetTokenizer()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Vt102Emulation::restoreCursor()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Vt102Emulation::restoreMode(int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Vt102Emulation::saveCursor()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Vt102Emulation::saveMode(int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Vt102Emulation::sendKeyEvent(QKeyEvent*)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Vt102Emulation::sendMouseEvent(int, int, int, int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Vt102Emulation::sendString(char const*, int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Vt102Emulation::sendText(QString const&)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Vt102Emulation::setAndUseCharset(int, int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Vt102Emulation::setCharset(int, int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Vt102Emulation::setDefaultMargins()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Vt102Emulation::setMargins(int, int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Vt102Emulation::setMode(int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Vt102Emulation::staticMetaObject@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Vt102Emulation::updateTitle()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Vt102Emulation::useCharset(int)@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Vt102Emulation::~Vt102Emulation()@Base" 0.6.0+20150709
 (optional|c++)"Konsole::Vt102Emulation::Vt102Emulation()@Base" 0.6.0+20150709
 (optional|c++)"konsole_wcwidth(unsigned short)@Base" 0.6.0+20150709
 (optional|c++)"KProcess::clearEnvironment()@Base" 0.6.0+20150709
 (optional|c++)"KProcess::clearProgram()@Base" 0.6.0+20150709
 (optional|c++)"KProcess::execute(int)@Base" 0.6.0+20150709
 (optional|c++)"KProcess::execute(QString const&, QStringList const&, int)@Base" 0.6.0+20150709
 (optional|c++)"KProcess::execute(QStringList const&, int)@Base" 0.6.0+20150709
 (optional|c++)"KProcess::~KProcess()@Base" 0.6.0+20150709
 (optional|c++)"KProcess::KProcess(KProcessPrivate*, QObject*)@Base" 0.6.0+20150709
 (optional|c++)"KProcess::KProcess(KProcessPrivate*, QObject*)@Base" 0.6.0+20150709
 (optional|c++)"KProcess::KProcess(QObject*)@Base" 0.6.0+20150709
 (optional|c++)"KProcess::KProcess(QObject*)@Base" 0.6.0+20150709
 (optional|c++)"KProcess::metaObject() const@Base" 0.6.0+20150709
 (optional|c++)"KProcess::operator<<(QString const&)@Base" 0.6.0+20150709
 (optional|c++)"KProcess::operator<<(QStringList const&)@Base" 0.6.0+20150709
 (optional|c++)"KProcess::outputChannelMode() const@Base" 0.6.0+20150709
 (optional|c++)"KProcess::pid() const@Base" 0.6.0+20150709
 (optional|c++)"KProcessPrivate::forwardStd(QProcess::ProcessChannel, int)@Base" 0.6.0+20150709
 (optional|c++)"KProcessPrivate::_k_forwardStderr()@Base" 0.6.0+20150709
 (optional|c++)"KProcessPrivate::_k_forwardStdout()@Base" 0.6.0+20150709
 (optional|c++)"KProcessPrivate::writeAll(QByteArray const&, int)@Base" 0.6.0+20150709
 (optional|c++)"KProcess::program() const@Base" 0.6.0+20150709
 (optional|c++)"KProcess::qt_metacall(QMetaObject::Call, int, void**)@Base" 0.6.0+20150709
 (optional|c++)"KProcess::qt_metacast(char const*)@Base" 0.6.0+20150709
 (optional|c++)"KProcess::setEnv(QString const&, QString const&, bool)@Base" 0.6.0+20150709
 (optional|c++)"KProcess::setNextOpenMode(QFlags<QIODevice::OpenModeFlag>)@Base" 0.6.0+20150709
 (optional|c++)"KProcess::setOutputChannelMode(KProcess::OutputChannelMode)@Base" 0.6.0+20150709
 (optional|c++)"KProcess::setProgram(QString const&, QStringList const&)@Base" 0.6.0+20150709
 (optional|c++)"KProcess::setProgram(QStringList const&)@Base" 0.6.0+20150709
 (optional|c++)"KProcess::start()@Base" 0.6.0+20150709
 (optional|c++)"KProcess::startDetached()@Base" 0.6.0+20150709
 (optional|c++)"KProcess::startDetached(QString const&, QStringList const&)@Base" 0.6.0+20150709
 (optional|c++)"KProcess::startDetached(QStringList const&)@Base" 0.6.0+20150709
 (optional|c++)"KProcess::staticMetaObject@Base" 0.6.0+20150709
 (optional|c++)"KProcess::unsetEnv(QString const&)@Base" 0.6.0+20150709
 (optional|c++)"KPty::close()@Base" 0.6.0+20150709
 (optional|c++)"KPty::closeSlave()@Base" 0.6.0+20150709
 (optional|c++)"KPtyDevice::atEnd() const@Base" 0.6.0+20150709
 (optional|c++)"KPtyDevice::bytesAvailable() const@Base" 0.6.0+20150709
 (optional|c++)"KPtyDevice::bytesToWrite() const@Base" 0.6.0+20150709
 (optional|c++)"KPtyDevice::canReadLine() const@Base" 0.6.0+20150709
 (optional|c++)"KPtyDevice::close()@Base" 0.6.0+20150709
 (optional|c++)"KPtyDevice::isSequential() const@Base" 0.6.0+20150709
 (optional|c++)"KPtyDevice::isSuspended() const@Base" 0.6.0+20150709
 (optional|c++)"KPtyDevice::~KPtyDevice()@Base" 0.6.0+20150709
 (optional|c++)"KPtyDevice::KPtyDevice(QObject*)@Base" 0.6.0+20150709
 (optional|c++)"KPtyDevice::metaObject() const@Base" 0.6.0+20150709
 (optional|c++)"KPtyDevice::open(int, QFlags<QIODevice::OpenModeFlag>)@Base" 0.6.0+20150709
 (optional|c++)"KPtyDevice::open(QFlags<QIODevice::OpenModeFlag>)@Base" 0.6.0+20150709
 (optional|c++)"KPtyDevicePrivate::doWait(int, bool)@Base" 0.6.0+20150709
 (optional|c++)"KPtyDevicePrivate::finishOpen(QFlags<QIODevice::OpenModeFlag>)@Base" 0.6.0+20150709
 (optional|c++)"KPtyDevicePrivate::_k_canRead()@Base" 0.6.0+20150709
 (optional|c++)"KPtyDevicePrivate::_k_canWrite()@Base" 0.6.0+20150709
 (optional|c++)"KPtyDevicePrivate::~KPtyDevicePrivate()@Base" 0.6.0+20150709
 (optional|c++)"KPtyDevice::qt_metacall(QMetaObject::Call, int, void**)@Base" 0.6.0+20150709
 (optional|c++)"KPtyDevice::qt_metacast(char const*)@Base" 0.6.0+20150709
 (optional|c++)"KPtyDevice::readData(char*, long long)@Base" 0.6.0+20150709
 (optional|c++)"KPtyDevice::readEof()@Base" 0.6.0+20150709
 (optional|c++)"KPtyDevice::readLineData(char*, long long)@Base" 0.6.0+20150709
 (optional|c++)"KPtyDevice::setSuspended(bool)@Base" 0.6.0+20150709
 (optional|c++)"KPtyDevice::staticMetaObject@Base" 0.6.0+20150709
 (optional|c++)"KPtyDevice::waitForBytesWritten(int)@Base" 0.6.0+20150709
 (optional|c++)"KPtyDevice::waitForReadyRead(int)@Base" 0.6.0+20150709
 (optional|c++)"KPtyDevice::writeData(char const*, long long)@Base" 0.6.0+20150709
 (optional|c++)"KPty::~KPty()@Base" 0.6.0+20150709
 (optional|c++)"KPty::KPty()@Base" 0.6.0+20150709
 (optional|c++)"KPty::KPty()@Base" 0.6.0+20150709
 (optional|c++)"KPty::KPty(KPtyPrivate*)@Base" 0.6.0+20150709
 (optional|c++)"KPty::KPty(KPtyPrivate*)@Base" 0.6.0+20150709
 (optional|c++)"KPty::login(char const*, char const*)@Base" 0.6.0+20150709
 (optional|c++)"KPty::logout()@Base" 0.6.0+20150709
 (optional|c++)"KPty::masterFd() const@Base" 0.6.0+20150709
 (optional|c++)"KPty::open()@Base" 0.6.0+20150709
 (optional|c++)"KPty::open(int)@Base" 0.6.0+20150709
 (optional|c++)"KPty::openSlave()@Base" 0.6.0+20150709
 (optional|c++)"KPtyPrivate::chownpty(bool)@Base" 0.6.0+20150709
 (optional|c++)"KPtyPrivate::~KPtyPrivate()@Base" 0.6.0+20150709
 (optional|c++)"KPtyPrivate::KPtyPrivate(KPty*)@Base" 0.6.0+20150709
 (optional|c++)"KPtyProcess::isUseUtmp() const@Base" 0.6.0+20150709
 (optional|c++)"KPtyProcess::~KPtyProcess()@Base" 0.6.0+20150709
 (optional|c++)"KPtyProcess::KPtyProcess(int, QObject*)@Base" 0.6.0+20150709
 (optional|c++)"KPtyProcess::KPtyProcess(int, QObject*)@Base" 0.6.0+20150709
 (optional|c++)"KPtyProcess::KPtyProcess(QObject*)@Base" 0.6.0+20150709
 (optional|c++)"KPtyProcess::KPtyProcess(QObject*)@Base" 0.6.0+20150709
 (optional|c++)"KPtyProcess::metaObject() const@Base" 0.6.0+20150709
 (optional|c++)"KPtyProcess::ptyChannels() const@Base" 0.6.0+20150709
 (optional|c++)"KPtyProcess::pty() const@Base" 0.6.0+20150709
 (optional|c++)"KPtyProcess::qt_metacall(QMetaObject::Call, int, void**)@Base" 0.6.0+20150709
 (optional|c++)"KPtyProcess::qt_metacast(char const*)@Base" 0.6.0+20150709
 (optional|c++)"KPtyProcess::setPtyChannels(QFlags<KPtyProcess::PtyChannelFlag>)@Base" 0.6.0+20150709
 (optional|c++)"KPtyProcess::setupChildProcess()@Base" 0.6.0+20150709
 (optional|c++)"KPtyProcess::setUseUtmp(bool)@Base" 0.6.0+20150709
 (optional|c++)"KPtyProcess::staticMetaObject@Base" 0.6.0+20150709
 (optional|c++)"KPty::setCTty()@Base" 0.6.0+20150709
 (optional|c++)"KPty::setEcho(bool)@Base" 0.6.0+20150709
 (optional|c++)"KPty::setWinSize(int, int)@Base" 0.6.0+20150709
 (optional|c++)"KPty::slaveFd() const@Base" 0.6.0+20150709
 (optional|c++)"KPty::tcGetAttr(termios*) const@Base" 0.6.0+20150709
 (optional|c++)"KPty::tcSetAttr(termios*)@Base" 0.6.0+20150709
 (optional|c++)"KPty::ttyName() const@Base" 0.6.0+20150709
 (optional|c++)"moveBlock(_IO_FILE*, int, int, char*)@Base" 0.6.0+20150709
 (optional|c++)"non-virtual thunk to Konsole::TerminalDisplay::~TerminalDisplay()@Base" 0.6.0+20150709
 (optional|c++)"non-virtual thunk to QTermWidget::~QTermWidget()@Base" 0.6.0+20150709
 (optional|c++)"non-virtual thunk to SearchBar::~SearchBar()@Base" 0.6.0+20150709
 (optional|c++)"operator+(QString const&, char)@Base" 0.6.0+20150709
 (optional|c++)"QByteArray::~QByteArray()@Base" 0.6.0+20150709
 (optional|c++)"QHash<int, Konsole::Filter::HotSpot*>::deleteNode2(QHashData::Node*)@Base" 0.6.0+20150709
 (optional|c++)"QHash<int, Konsole::Filter::HotSpot*>::detach_helper()@Base" 0.6.0+20150709
 (optional|c++)"QHash<int, Konsole::Filter::HotSpot*>::duplicateNode(QHashData::Node*, void*)@Base" 0.6.0+20150709
 (optional|c++)"QHash<int, Konsole::Filter::HotSpot*>::findNode(int const&, unsigned int*) const@Base" 0.6.0+20150709
 (optional|c++)"QHash<int, Konsole::Filter::HotSpot*>::~QHash()@Base" 0.6.0+20150709
 (optional|c++)"QHash<int, Konsole::Filter::HotSpot*>::values(int const&) const@Base" 0.6.0+20150709
 (optional|c++)"QHash<int, Konsole::KeyboardTranslator::Entry>::deleteNode2(QHashData::Node*)@Base" 0.6.0+20150709
 (optional|c++)"QHash<int, Konsole::KeyboardTranslator::Entry>::detach_helper()@Base" 0.6.0+20150709
 (optional|c++)"QHash<int, Konsole::KeyboardTranslator::Entry>::duplicateNode(QHashData::Node*, void*)@Base" 0.6.0+20150709
 (optional|c++)"QHash<int, Konsole::KeyboardTranslator::Entry>::erase(QHash<int, Konsole::KeyboardTranslator::Entry>::iterator)@Base" 0.6.0+20150709
 (optional|c++)"QHash<int, Konsole::KeyboardTranslator::Entry>::findNode(int const&, unsigned int*) const@Base" 0.6.0+20150709
 (optional|c++)"QHash<int, Konsole::KeyboardTranslator::Entry>::~QHash()@Base" 0.6.0+20150709
 (optional|c++)"QHash<int, QString>::deleteNode2(QHashData::Node*)@Base" 0.6.0+20150709
 (optional|c++)"QHash<int, QString>::detach_helper()@Base" 0.6.0+20150709
 (optional|c++)"QHash<int, QString>::duplicateNode(QHashData::Node*, void*)@Base" 0.6.0+20150709
 (optional|c++)"QHash<int, QString>::findNode(int const&, unsigned int*) const@Base" 0.6.0+20150709
 (optional|c++)"QHash<int, QString>::keys() const@Base" 0.6.0+20150709
 (optional|c++)"QHash<int, QString>::~QHash()@Base" 0.6.0+20150709
 (optional|c++)"QHash<Konsole::ColorScheme*, QHashDummyValue>::deleteNode2(QHashData::Node*)@Base" 0.6.0+20150709
 (optional|c++)"QHash<Konsole::Session*, bool>::deleteNode2(QHashData::Node*)@Base" 0.6.0+20150709
 (optional|c++)"QHash<Konsole::Session*, bool>::detach_helper()@Base" 0.6.0+20150709
 (optional|c++)"QHash<Konsole::Session*, bool>::duplicateNode(QHashData::Node*, void*)@Base" 0.6.0+20150709
 (optional|c++)"QHash<Konsole::Session*, bool>::findNode(Konsole::Session* const&, unsigned int*) const@Base" 0.6.0+20150709
 (optional|c++)"QHash<Konsole::Session*, bool>::keys() const@Base" 0.6.0+20150709
 (optional|c++)"QHash<QString, Konsole::ColorScheme const*>::deleteNode2(QHashData::Node*)@Base" 0.6.0+20150709
 (optional|c++)"QHash<QString, Konsole::ColorScheme const*>::detach_helper()@Base" 0.6.0+20150709
 (optional|c++)"QHash<QString, Konsole::ColorScheme const*>::duplicateNode(QHashData::Node*, void*)@Base" 0.6.0+20150709
 (optional|c++)"QHash<QString, Konsole::ColorScheme const*>::findNode(QString const&, unsigned int*) const@Base" 0.6.0+20150709
 (optional|c++)"QHash<QString, Konsole::ColorScheme const*>::~QHash()@Base" 0.6.0+20150709
 (optional|c++)"QHash<QString, Konsole::ColorScheme const*>::remove(QString const&)@Base" 0.6.0+20150709
 (optional|c++)"QHash<QString, Konsole::ColorScheme const*>::values() const@Base" 0.6.0+20150709
 (optional|c++)"QHash<QString, Konsole::KeyboardTranslator*>::deleteNode2(QHashData::Node*)@Base" 0.6.0+20150709
 (optional|c++)"QHash<QString, Konsole::KeyboardTranslator*>::detach_helper()@Base" 0.6.0+20150709
 (optional|c++)"QHash<QString, Konsole::KeyboardTranslator*>::duplicateNode(QHashData::Node*, void*)@Base" 0.6.0+20150709
 (optional|c++)"QHash<QString, Konsole::KeyboardTranslator*>::findNode(QString const&, unsigned int*) const@Base" 0.6.0+20150709
 (optional|c++)"QHash<QString, Konsole::KeyboardTranslator*>::remove(QString const&)@Base" 0.6.0+20150709
 (optional|c++)"QHash<unsigned short, unsigned short*>::deleteNode2(QHashData::Node*)@Base" 0.6.0+20150709
 (optional|c++)"QHash<unsigned short, unsigned short*>::detach_helper()@Base" 0.6.0+20150709
 (optional|c++)"QHash<unsigned short, unsigned short*>::duplicateNode(QHashData::Node*, void*)@Base" 0.6.0+20150709
 (optional|c++)"QHash<unsigned short, unsigned short*>::findNode(unsigned short const&, unsigned int*) const@Base" 0.6.0+20150709
 (optional|c++)"QHash<unsigned short, unsigned short*>::~QHash()@Base" 0.6.0+20150709
 (optional|c++)"QLinkedList<QByteArray>::append(QByteArray const&)@Base" 0.6.0+20150709
 (optional|c++)"QLinkedList<QByteArray>::detach_helper2(QLinkedList<QByteArray>::iterator)@Base" 0.6.0+20150709
 (optional|c++)"QLinkedList<QByteArray>::~QLinkedList()@Base" 0.6.0+20150709
 (optional|c++)"QList<int>::append(int const&)@Base" 0.6.0+20150709
 (optional|c++)"QList<int>::detach_helper_grow(int, int)@Base" 0.6.0+20150709
 (optional|c++)"QList<int>::detach_helper(int)@Base" 0.6.0+20150709
 (optional|c++)"QList<int>::~QList()@Base" 0.6.0+20150709
 (optional|c++)"QList<int>::QList(QList<int> const&)@Base" 0.6.0+20150709
 (optional|c++)"QList<Konsole::ColorScheme const*>::detach_helper_grow(int, int)@Base" 0.6.0+20150709
 (optional|c++)"QList<Konsole::ColorScheme const*>::detach_helper(int)@Base" 0.6.0+20150709
 (optional|c++)"QList<Konsole::ColorScheme const*>::~QList()@Base" 0.6.0+20150709
 (optional|c++)"QList<Konsole::CompactHistoryBlock*>::append(Konsole::CompactHistoryBlock* const&)@Base" 0.6.0+20150709
 (optional|c++)"QList<Konsole::CompactHistoryBlock*>::clear()@Base" 0.6.0+20150709
 (optional|c++)"QList<Konsole::CompactHistoryBlock*>::detach_helper_grow(int, int)@Base" 0.6.0+20150709
 (optional|c++)"QList<Konsole::CompactHistoryBlock*>::detach_helper(int)@Base" 0.6.0+20150709
 (optional|c++)"QList<Konsole::CompactHistoryBlock*>::~QList()@Base" 0.6.0+20150709
 (optional|c++)"QList<Konsole::CompactHistoryLine*>::append(Konsole::CompactHistoryLine* const&)@Base" 0.6.0+20150709
 (optional|c++)"QList<Konsole::CompactHistoryLine*>::clear()@Base" 0.6.0+20150709
 (optional|c++)"QList<Konsole::CompactHistoryLine*>::detach_helper_grow(int, int)@Base" 0.6.0+20150709
 (optional|c++)"QList<Konsole::CompactHistoryLine*>::detach_helper(int)@Base" 0.6.0+20150709
 (optional|c++)"QList<Konsole::CompactHistoryLine*>::~QList()@Base" 0.6.0+20150709
 (optional|c++)"QList<Konsole::Filter*>::append(Konsole::Filter* const&)@Base" 0.6.0+20150709
 (optional|c++)"QList<Konsole::Filter*>::detach_helper_grow(int, int)@Base" 0.6.0+20150709
 (optional|c++)"QList<Konsole::Filter*>::detach_helper(int)@Base" 0.6.0+20150709
 (optional|c++)"QList<Konsole::Filter::HotSpot*>::append(Konsole::Filter::HotSpot* const&)@Base" 0.6.0+20150709
 (optional|c++)"QList<Konsole::Filter::HotSpot*>::detach_helper_grow(int, int)@Base" 0.6.0+20150709
 (optional|c++)"QList<Konsole::Filter::HotSpot*>::operator+=(QList<Konsole::Filter::HotSpot*> const&)@Base" 0.6.0+20150709
 (optional|c++)"QList<Konsole::Filter::HotSpot*>::~QList()@Base" 0.6.0+20150709
 (optional|c++)"QList<Konsole::Filter::HotSpot*>::QList(QList<Konsole::Filter::HotSpot*> const&)@Base" 0.6.0+20150709
 (optional|c++)"QList<Konsole::Filter*>::~QList()@Base" 0.6.0+20150709
 (optional|c++)"QList<Konsole::Filter*>::QList(QList<Konsole::Filter*> const&)@Base" 0.6.0+20150709
 (optional|c++)"QList<Konsole::Filter*>::removeAll(Konsole::Filter* const&)@Base" 0.6.0+20150709
 (optional|c++)"QList<Konsole::KeyboardTranslator::Entry>::append(Konsole::KeyboardTranslator::Entry const&)@Base" 0.6.0+20150709
 (optional|c++)"QList<Konsole::KeyboardTranslator::Entry>::detach_helper_grow(int, int)@Base" 0.6.0+20150709
 (optional|c++)"QList<Konsole::KeyboardTranslator::Entry>::detach_helper(int)@Base" 0.6.0+20150709
 (optional|c++)"QList<Konsole::KeyboardTranslator::Entry>::~QList()@Base" 0.6.0+20150709
 (optional|c++)"QList<Konsole::KeyboardTranslator::Entry>::QList(QList<Konsole::KeyboardTranslator::Entry> const&)@Base" 0.6.0+20150709
 (optional|c++)"QList<Konsole::KeyboardTranslatorReader::Token>::append(Konsole::KeyboardTranslatorReader::Token const&)@Base" 0.6.0+20150709
 (optional|c++)"QList<Konsole::KeyboardTranslatorReader::Token>::detach_helper_grow(int, int)@Base" 0.6.0+20150709
 (optional|c++)"QList<Konsole::KeyboardTranslatorReader::Token>::detach_helper(int)@Base" 0.6.0+20150709
 (optional|c++)"QList<Konsole::KeyboardTranslatorReader::Token>::~QList()@Base" 0.6.0+20150709
 (optional|c++)"QList<Konsole::ScreenWindow*>::append(Konsole::ScreenWindow* const&)@Base" 0.6.0+20150709
 (optional|c++)"QList<Konsole::ScreenWindow*>::detach_helper_grow(int, int)@Base" 0.6.0+20150709
 (optional|c++)"QList<Konsole::ScreenWindow*>::~QList()@Base" 0.6.0+20150709
 (optional|c++)"QList<Konsole::ScreenWindow*>::QList(QList<Konsole::ScreenWindow*> const&)@Base" 0.6.0+20150709
 (optional|c++)"QList<Konsole::Session*>::append(Konsole::Session* const&)@Base" 0.6.0+20150709
 (optional|c++)"QList<Konsole::Session*>::detach_helper_grow(int, int)@Base" 0.6.0+20150709
 (optional|c++)"QList<Konsole::Session*>::detach_helper(int)@Base" 0.6.0+20150709
 (optional|c++)"QList<Konsole::Session*>::~QList()@Base" 0.6.0+20150709
 (optional|c++)"QList<Konsole::Session*>::QList(QList<Konsole::Session*> const&)@Base" 0.6.0+20150709
 (optional|c++)"QList<Konsole::TerminalDisplay*>::append(Konsole::TerminalDisplay* const&)@Base" 0.6.0+20150709
 (optional|c++)"QList<Konsole::TerminalDisplay*>::detach_helper_grow(int, int)@Base" 0.6.0+20150709
 (optional|c++)"QList<Konsole::TerminalDisplay*>::detach_helper(int)@Base" 0.6.0+20150709
 (optional|c++)"QList<Konsole::TerminalDisplay*>::~QList()@Base" 0.6.0+20150709
 (optional|c++)"QList<Konsole::TerminalDisplay*>::QList(QList<Konsole::TerminalDisplay*> const&)@Base" 0.6.0+20150709
 (optional|c++)"QList<Konsole::TerminalDisplay*>::removeAll(Konsole::TerminalDisplay* const&)@Base" 0.6.0+20150709
 (optional|c++)"QList<QAction*>::append(QAction* const&)@Base" 0.6.0+20150709
 (optional|c++)"QList<QAction*>::detach_helper_grow(int, int)@Base" 0.6.0+20150709
 (optional|c++)"QList<QString>::append(QString const&)@Base" 0.6.0+20150709
 (optional|c++)"QList<QString>::detach_helper_grow(int, int)@Base" 0.6.0+20150709
 (optional|c++)"QList<QString>::detach_helper(int)@Base" 0.6.0+20150709
 (optional|c++)"QList<QString>::mid(int, int) const@Base" 0.6.0+20150709
 (optional|c++)"QList<QString>::operator+=(QList<QString> const&)@Base" 0.6.0+20150709
 (optional|c++)"QList<QString>::~QList()@Base" 0.6.0+20150709
 (optional|c++)"QList<QString>::QList(QList<QString> const&)@Base" 0.6.0+20150709
 (optional|c++)"QList<QString>::removeAll(QString const&)@Base" 0.6.0+20150709
 (optional|c++)"QList<QUrl>::detach_helper(int)@Base" 0.6.0+20150709
 (optional|c++)"QList<QUrl>::~QList()@Base" 0.6.0+20150709
 (optional|c++)"QString::~QString()@Base" 0.6.0+20150709
 (optional|c++)"QTermWidget::getHotSpotAt(int, int) const@Base" 0.6.0+20150709
 (optional|c++)"QTermWidget::getHotSpotAt(QPoint const&) const@Base" 0.6.0+20150709
 (optional|c++)"QTermWidget::getPtySlaveFd() const@Base" 0.6.0+20150709
 (optional|c++)"QTermWidget::metaObject() const@Base" 0.6.0+20150709
 (optional|c++)"QTermWidget::sizeHint() const@Base" 0.6.0+20150709
 (optional|c++)"QVarLengthArray<unsigned char, 64>::realloc(int, int)@Base" 0.6.0+20150709
 (optional|c++)"QVector<Konsole::Character>::insert(Konsole::Character*, int, Konsole::Character const&)@Base" 0.6.0+20150709
 (optional|c++)"QVector<Konsole::Character>::operator=(QVector<Konsole::Character> const&)@Base" 0.6.0+20150709
 (optional|c++)"QVector<Konsole::Character>::~QVector()@Base" 0.6.0+20150709
 (optional|c++)"QVector<Konsole::Character>::QVector(int)@Base" 0.6.0+20150709
 (optional|c++)"QVector<Konsole::Character>::reallocData(int, int, QFlags<QArrayData::AllocationOption>)@Base" 0.6.0+20150709
 (optional|c++)"QVector<Konsole::Character>::resize(int)@Base" 0.6.0+20150709
 (optional|c++)"QVector<QRect>::~QVector()@Base" 0.6.0+20150709
 (optional|c++)"QVector<unsigned char>::~QVector()@Base" 0.6.0+20150709
 (optional|c++)"QVector<unsigned char>::reallocData(int, int, QFlags<QArrayData::AllocationOption>)@Base" 0.6.0+20150709
 (optional|c++)"QWeakPointer<QObject>::~QWeakPointer()@Base" 0.6.0+20150709
 (optional|c++)"SearchBar::clearBackgroundColor()@Base" 0.6.0+20150709
 (optional|c++)"SearchBar::findNext()@Base" 0.6.0+20150709
 (optional|c++)"SearchBar::findPrevious()@Base" 0.6.0+20150709
 (optional|c++)"SearchBar::highlightAllMatches()@Base" 0.6.0+20150709
 (optional|c++)"SearchBar::highlightMatchesChanged(bool)@Base" 0.6.0+20150709
 (optional|c++)"SearchBar::keyReleaseEvent(QKeyEvent*)@Base" 0.6.0+20150709
 (optional|c++)"SearchBar::matchCase()@Base" 0.6.0+20150709
 (optional|c++)"SearchBar::metaObject() const@Base" 0.6.0+20150709
 (optional|c++)"SearchBar::noMatchFound()@Base" 0.6.0+20150709
 (optional|c++)"SearchBar::qt_metacall(QMetaObject::Call, int, void**)@Base" 0.6.0+20150709
 (optional|c++)"SearchBar::qt_metacast(char const*)@Base" 0.6.0+20150709
 (optional|c++)"SearchBar::~SearchBar()@Base" 0.6.0+20150709
 (optional|c++)"SearchBar::SearchBar(QWidget*)@Base" 0.6.0+20150709
 (optional|c++)"SearchBar::searchCriteriaChanged()@Base" 0.6.0+20150709
 (optional|c++)"SearchBar::searchText()@Base" 0.6.0+20150709
 (optional|c++)"SearchBar::show()@Base" 0.6.0+20150709
 (optional|c++)"SearchBar::staticMetaObject@Base" 0.6.0+20150709
 (optional|c++)"SearchBar::useRegularExpression()@Base" 0.6.0+20150709
 (optional|c++)"string_width(QString const&)@Base" 0.6.0+20150709
 (optional|c++)"TermWidgetImpl::createSession(QWidget*)@Base" 0.6.0+20150709
 (optional|c++)"TermWidgetImpl::createTerminalDisplay(Konsole::Session*, QWidget*)@Base" 0.6.0+20150709
 (optional|c++)"TermWidgetImpl::TermWidgetImpl(QWidget*)@Base" 0.6.0+20150709
 (optional|c++)"typeinfo for HistorySearch@Base" 0.6.0+20150709
 (optional|c++)"typeinfo for Konsole::AutoScrollHandler@Base" 0.6.0+20150709
 (optional|c++)"typeinfo for Konsole::CompactHistoryBlock@Base" 0.6.0+20150709
 (optional|c++)"typeinfo for Konsole::CompactHistoryLine@Base" 0.6.0+20150709
 (optional|c++)"typeinfo for Konsole::CompactHistoryScroll@Base" 0.6.0+20150709
 (optional|c++)"typeinfo for Konsole::CompactHistoryType@Base" 0.6.0+20150709
 (optional|c++)"typeinfo for Konsole::Emulation@Base" 0.6.0+20150709
 (optional|c++)"typeinfo for Konsole::Filter@Base" 0.6.0+20150709
 (optional|c++)"typeinfo for Konsole::FilterChain@Base" 0.6.0+20150709
 (optional|c++)"typeinfo for Konsole::Filter::HotSpot@Base" 0.6.0+20150709
 (optional|c++)"typeinfo for Konsole::FilterObject@Base" 0.6.0+20150709
 (optional|c++)"typeinfo for Konsole::HistoryFile@Base" 0.6.0+20150709
 (optional|c++)"typeinfo for Konsole::HistoryScroll@Base" 0.6.0+20150709
 (optional|c++)"typeinfo for Konsole::HistoryScrollBlockArray@Base" 0.6.0+20150709
 (optional|c++)"typeinfo for Konsole::HistoryScrollBuffer@Base" 0.6.0+20150709
 (optional|c++)"typeinfo for Konsole::HistoryScrollFile@Base" 0.6.0+20150709
 (optional|c++)"typeinfo for Konsole::HistoryScrollNone@Base" 0.6.0+20150709
 (optional|c++)"typeinfo for Konsole::HistoryType@Base" 0.6.0+20150709
 (optional|c++)"typeinfo for Konsole::HistoryTypeBlockArray@Base" 0.6.0+20150709
 (optional|c++)"typeinfo for Konsole::HistoryTypeBuffer@Base" 0.6.0+20150709
 (optional|c++)"typeinfo for Konsole::HistoryTypeFile@Base" 0.6.0+20150709
 (optional|c++)"typeinfo for Konsole::HistoryTypeNone@Base" 0.6.0+20150709
 (optional|c++)"typeinfo for Konsole::HTMLDecoder@Base" 0.6.0+20150709
 (optional|c++)"typeinfo for Konsole::PlainTextDecoder@Base" 0.6.0+20150709
 (optional|c++)"typeinfo for Konsole::Pty@Base" 0.6.0+20150709
 (optional|c++)"typeinfo for Konsole::RegExpFilter@Base" 0.6.0+20150709
 (optional|c++)"typeinfo for Konsole::RegExpFilter::HotSpot@Base" 0.6.0+20150709
 (optional|c++)"typeinfo for Konsole::ScreenWindow@Base" 0.6.0+20150709
 (optional|c++)"typeinfo for Konsole::Session@Base" 0.6.0+20150709
 (optional|c++)"typeinfo for Konsole::SessionGroup@Base" 0.6.0+20150709
 (optional|c++)"typeinfo for Konsole::TerminalCharacterDecoder@Base" 0.6.0+20150709
 (optional|c++)"typeinfo for Konsole::TerminalDisplay@Base" 0.6.0+20150709
 (optional|c++)"typeinfo for Konsole::TerminalImageFilterChain@Base" 0.6.0+20150709
 (optional|c++)"typeinfo for Konsole::UrlFilter@Base" 0.6.0+20150709
 (optional|c++)"typeinfo for Konsole::UrlFilter::HotSpot@Base" 0.6.0+20150709
 (optional|c++)"typeinfo for Konsole::Vt102Emulation@Base" 0.6.0+20150709
 (optional|c++)"typeinfo for KProcess@Base" 0.6.0+20150709
 (optional|c++)"typeinfo for KPty@Base" 0.6.0+20150709
 (optional|c++)"typeinfo for KPtyDevice@Base" 0.6.0+20150709
 (optional|c++)"typeinfo for KPtyDevicePrivate@Base" 0.6.0+20150709
 (optional|c++)"typeinfo for KPtyPrivate@Base" 0.6.0+20150709
 (optional|c++)"typeinfo for KPtyProcess@Base" 0.6.0+20150709
 (optional|c++)"typeinfo for QList<Konsole::Filter*>@Base" 0.6.0+20150709
 (optional|c++)"typeinfo for QListSpecialMethods<Konsole::Filter*>@Base" 0.6.0+20150709
 (optional|c++)"typeinfo for QTermWidget@Base" 0.6.0+20150709
 (optional|c++)"typeinfo for SearchBar@Base" 0.6.0+20150709
 (optional|c++)"typeinfo name for HistorySearch@Base" 0.6.0+20150709
 (optional|c++)"typeinfo name for Konsole::AutoScrollHandler@Base" 0.6.0+20150709
 (optional|c++)"typeinfo name for Konsole::CompactHistoryBlock@Base" 0.6.0+20150709
 (optional|c++)"typeinfo name for Konsole::CompactHistoryLine@Base" 0.6.0+20150709
 (optional|c++)"typeinfo name for Konsole::CompactHistoryScroll@Base" 0.6.0+20150709
 (optional|c++)"typeinfo name for Konsole::CompactHistoryType@Base" 0.6.0+20150709
 (optional|c++)"typeinfo name for Konsole::Emulation@Base" 0.6.0+20150709
 (optional|c++)"typeinfo name for Konsole::Filter@Base" 0.6.0+20150709
 (optional|c++)"typeinfo name for Konsole::FilterChain@Base" 0.6.0+20150709
 (optional|c++)"typeinfo name for Konsole::Filter::HotSpot@Base" 0.6.0+20150709
 (optional|c++)"typeinfo name for Konsole::FilterObject@Base" 0.6.0+20150709
 (optional|c++)"typeinfo name for Konsole::HistoryFile@Base" 0.6.0+20150709
 (optional|c++)"typeinfo name for Konsole::HistoryScroll@Base" 0.6.0+20150709
 (optional|c++)"typeinfo name for Konsole::HistoryScrollBlockArray@Base" 0.6.0+20150709
 (optional|c++)"typeinfo name for Konsole::HistoryScrollBuffer@Base" 0.6.0+20150709
 (optional|c++)"typeinfo name for Konsole::HistoryScrollFile@Base" 0.6.0+20150709
 (optional|c++)"typeinfo name for Konsole::HistoryScrollNone@Base" 0.6.0+20150709
 (optional|c++)"typeinfo name for Konsole::HistoryType@Base" 0.6.0+20150709
 (optional|c++)"typeinfo name for Konsole::HistoryTypeBlockArray@Base" 0.6.0+20150709
 (optional|c++)"typeinfo name for Konsole::HistoryTypeBuffer@Base" 0.6.0+20150709
 (optional|c++)"typeinfo name for Konsole::HistoryTypeFile@Base" 0.6.0+20150709
 (optional|c++)"typeinfo name for Konsole::HistoryTypeNone@Base" 0.6.0+20150709
 (optional|c++)"typeinfo name for Konsole::HTMLDecoder@Base" 0.6.0+20150709
 (optional|c++)"typeinfo name for Konsole::PlainTextDecoder@Base" 0.6.0+20150709
 (optional|c++)"typeinfo name for Konsole::Pty@Base" 0.6.0+20150709
 (optional|c++)"typeinfo name for Konsole::RegExpFilter@Base" 0.6.0+20150709
 (optional|c++)"typeinfo name for Konsole::RegExpFilter::HotSpot@Base" 0.6.0+20150709
 (optional|c++)"typeinfo name for Konsole::ScreenWindow@Base" 0.6.0+20150709
 (optional|c++)"typeinfo name for Konsole::Session@Base" 0.6.0+20150709
 (optional|c++)"typeinfo name for Konsole::SessionGroup@Base" 0.6.0+20150709
 (optional|c++)"typeinfo name for Konsole::TerminalCharacterDecoder@Base" 0.6.0+20150709
 (optional|c++)"typeinfo name for Konsole::TerminalDisplay@Base" 0.6.0+20150709
 (optional|c++)"typeinfo name for Konsole::TerminalImageFilterChain@Base" 0.6.0+20150709
 (optional|c++)"typeinfo name for Konsole::UrlFilter@Base" 0.6.0+20150709
 (optional|c++)"typeinfo name for Konsole::UrlFilter::HotSpot@Base" 0.6.0+20150709
 (optional|c++)"typeinfo name for Konsole::Vt102Emulation@Base" 0.6.0+20150709
 (optional|c++)"typeinfo name for KProcess@Base" 0.6.0+20150709
 (optional|c++)"typeinfo name for KPty@Base" 0.6.0+20150709
 (optional|c++)"typeinfo name for KPtyDevice@Base" 0.6.0+20150709
 (optional|c++)"typeinfo name for KPtyDevicePrivate@Base" 0.6.0+20150709
 (optional|c++)"typeinfo name for KPtyPrivate@Base" 0.6.0+20150709
 (optional|c++)"typeinfo name for KPtyProcess@Base" 0.6.0+20150709
 (optional|c++)"typeinfo name for QList<Konsole::Filter*>@Base" 0.6.0+20150709
 (optional|c++)"typeinfo name for QListSpecialMethods<Konsole::Filter*>@Base" 0.6.0+20150709
 (optional|c++)"typeinfo name for QTermWidget@Base" 0.6.0+20150709
 (optional|c++)"typeinfo name for SearchBar@Base" 0.6.0+20150709
 (optional|c++)"Ui_SearchBar::setupUi(QWidget*)@Base" 0.6.0+20150709
 (optional|c++)"vtable for HistorySearch@Base" 0.6.0+20150709
 (optional|c++)"vtable for Konsole::AutoScrollHandler@Base" 0.6.0+20150709
 (optional|c++)"vtable for Konsole::CompactHistoryBlock@Base" 0.6.0+20150709
 (optional|c++)"vtable for Konsole::CompactHistoryLine@Base" 0.6.0+20150709
 (optional|c++)"vtable for Konsole::CompactHistoryScroll@Base" 0.6.0+20150709
 (optional|c++)"vtable for Konsole::CompactHistoryType@Base" 0.6.0+20150709
 (optional|c++)"vtable for Konsole::Emulation@Base" 0.6.0+20150709
 (optional|c++)"vtable for Konsole::Filter@Base" 0.6.0+20150709
 (optional|c++)"vtable for Konsole::FilterChain@Base" 0.6.0+20150709
 (optional|c++)"vtable for Konsole::Filter::HotSpot@Base" 0.6.0+20150709
 (optional|c++)"vtable for Konsole::FilterObject@Base" 0.6.0+20150709
 (optional|c++)"vtable for Konsole::HistoryFile@Base" 0.6.0+20150709
 (optional|c++)"vtable for Konsole::HistoryScroll@Base" 0.6.0+20150709
 (optional|c++)"vtable for Konsole::HistoryScrollBlockArray@Base" 0.6.0+20150709
 (optional|c++)"vtable for Konsole::HistoryScrollBuffer@Base" 0.6.0+20150709
 (optional|c++)"vtable for Konsole::HistoryScrollFile@Base" 0.6.0+20150709
 (optional|c++)"vtable for Konsole::HistoryScrollNone@Base" 0.6.0+20150709
 (optional|c++)"vtable for Konsole::HistoryType@Base" 0.6.0+20150709
 (optional|c++)"vtable for Konsole::HistoryTypeBlockArray@Base" 0.6.0+20150709
 (optional|c++)"vtable for Konsole::HistoryTypeBuffer@Base" 0.6.0+20150709
 (optional|c++)"vtable for Konsole::HistoryTypeFile@Base" 0.6.0+20150709
 (optional|c++)"vtable for Konsole::HistoryTypeNone@Base" 0.6.0+20150709
 (optional|c++)"vtable for Konsole::HTMLDecoder@Base" 0.6.0+20150709
 (optional|c++)"vtable for Konsole::PlainTextDecoder@Base" 0.6.0+20150709
 (optional|c++)"vtable for Konsole::Pty@Base" 0.6.0+20150709
 (optional|c++)"vtable for Konsole::RegExpFilter@Base" 0.6.0+20150709
 (optional|c++)"vtable for Konsole::RegExpFilter::HotSpot@Base" 0.6.0+20150709
 (optional|c++)"vtable for Konsole::ScreenWindow@Base" 0.6.0+20150709
 (optional|c++)"vtable for Konsole::Session@Base" 0.6.0+20150709
 (optional|c++)"vtable for Konsole::SessionGroup@Base" 0.6.0+20150709
 (optional|c++)"vtable for Konsole::TerminalDisplay@Base" 0.6.0+20150709
 (optional|c++)"vtable for Konsole::TerminalImageFilterChain@Base" 0.6.0+20150709
 (optional|c++)"vtable for Konsole::UrlFilter@Base" 0.6.0+20150709
 (optional|c++)"vtable for Konsole::UrlFilter::HotSpot@Base" 0.6.0+20150709
 (optional|c++)"vtable for Konsole::Vt102Emulation@Base" 0.6.0+20150709
 (optional|c++)"vtable for KProcess@Base" 0.6.0+20150709
 (optional|c++)"vtable for KPtyDevice@Base" 0.6.0+20150709
 (optional|c++)"vtable for KPtyDevicePrivate@Base" 0.6.0+20150709
 (optional|c++)"vtable for KPtyPrivate@Base" 0.6.0+20150709
 (optional|c++)"vtable for KPtyProcess@Base" 0.6.0+20150709
 (optional|c++)"vtable for QTermWidget@Base" 0.6.0+20150709
 (optional|c++)"vtable for SearchBar@Base" 0.6.0+20150709
