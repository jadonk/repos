Description: Set default scaling to be 1:1, instead of using the hardware's
  reporting to define scaling by default.  This is because hardware lies.  Lots
  of it does.
Author: Chad MILLER <chad.miller@canonical.com>
Forwarded: not-needed

--- a/ui/views/widget/desktop_aura/desktop_screen_x11.cc
+++ b/ui/views/widget/desktop_aura/desktop_screen_x11.cc
@@ -314,7 +314,7 @@ std::vector<gfx::Display> DesktopScreenX
 
   // As per-display scale factor is not supported right now,
   // the X11 root window's scale factor is always used.
-  const float device_scale_factor = GetDeviceScaleFactor();
+  float device_scale_factor = GetDeviceScaleFactor();
   for (int i = 0; i < resources->noutput; ++i) {
     RROutput output_id = resources->outputs[i];
     gfx::XScopedPtr<XRROutputInfo,
@@ -341,11 +341,13 @@ std::vector<gfx::Display> DesktopScreenX
       gfx::Display display(display_id, crtc_bounds);
 
       // An integer that forces discrete steps.
-      int density_indicator = 0;
+      int density_indicator = 8;
 #ifdef USE_GLIB
       if (display_scales != NULL) {
-        (void) g_variant_lookup(display_scales, output_info->name, "i",
-                                &density_indicator);
+        if (! g_variant_lookup(display_scales, output_info->name, "i",
+                                &density_indicator)) {
+          density_indicator = 8;  // default scale is 1
+        }
         DCHECK_LE(0, density_indicator);
         DVLOG(1) << "Got density indictor " << density_indicator << " from display_scales for " << output_info->name;
       }
